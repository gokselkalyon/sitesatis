//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sitesatis.Models.entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class satissitesivol1DBEntities : DbContext
    {
        public satissitesivol1DBEntities()
            : base("name=satissitesivol1DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<autorization> autorizations { get; set; }
        public virtual DbSet<cargo> cargoes { get; set; }
        public virtual DbSet<cargo_type> cargo_type { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<menu> menus { get; set; }
        public virtual DbSet<product> products { get; set; }
        public virtual DbSet<repository> repositories { get; set; }
        public virtual DbSet<sitemaster> sitemasters { get; set; }
        public virtual DbSet<sitepage> sitepages { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual int categoryinsert(string categoryname)
        {
            var categorynameParameter = categoryname != null ?
                new ObjectParameter("categoryname", categoryname) :
                new ObjectParameter("categoryname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("categoryinsert", categorynameParameter);
        }
    
        public virtual int categoryupdate(string categoryname, Nullable<int> id)
        {
            var categorynameParameter = categoryname != null ?
                new ObjectParameter("categoryname", categoryname) :
                new ObjectParameter("categoryname", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("categoryupdate", categorynameParameter, idParameter);
        }
    }
}
